# -*- coding: utf-8 -*-
"""notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q9BjR1eS59E_XSwwebdRQ2RM4P83uCvY

# Proyek Akhir: Menyelesaikan Permasalahan Perusahaan Edutech

- **Nama:** Labiba Adinda Zahwana
- **Email:** labibaadinda11@gmail.com

# 1. Persiapan

## Import Library
Import library / package yang dibutuhkan
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from scipy.stats import chi2_contingency
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import pickle

"""## Import Dataset
Menyiapkan data yang akan digunakan di project ini
"""

dataset = "https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/refs/heads/main/students_performance/data.csv"
df = pd.read_csv(dataset, delimiter=';', on_bad_lines='skip')
df

"""# 2. Data Understanding
Ringkasan data dan statistik
"""

df.info()

df.describe()

df.isnull().sum()

"""Berdasarkan informasi yang diberikan terkait dataset "Students Performance", berikut adalah beberapa insight yang dapat diperoleh dari Data Understanding:

1. Jumlah Data dan Kolom

- Dataset ini berisi 4424 entri data dan 37 kolom.
- Tipe data yang dominan adalah integer dengan 29 kolom dan 7 kolom bertipe float. Selain itu, ada satu kolom bertipe object (yaitu kolom `Status` yang mungkin berisi informasi status mahasiswa, misalnya lulus atau tidak lulus).

2. Keterangan Kolom

- Kolom integer berhubungan dengan berbagai atribut numerik seperti status pernikahan (`Marital_status`), jenis kelamin (`Gender`), jenis kualifikasi sebelumnya (`Previous_qualification`), dan status keuangan terkait biaya kuliah (`Tuition_fees_up_to_date`).
- Kolom float sebagian besar berhubungan dengan nilai akademik atau ukuran ekonomi, seperti nilai ujian (`Previous_qualification_grade`, `Admission_grade`), nilai mata kuliah (`Curricular_units_1st_sem_grade`, `Curricular_units_2nd_sem_grade`), dan indikator ekonomi (`Unemployment_rate`, `Inflation_rate`, `GDP`).
- Kolom Status bertipe objek, yang mungkin perlu diolah menjadi kategori untuk analisis lebih lanjut.

3. Statistik Deskriptif

Dari hasil `df.describe()`, Anda bisa melihat ringkasan statistik untuk kolom numerik, seperti:
- `Previous_qualification_grade` memiliki nilai rata-rata sekitar 12.99 dengan rentang antara nilai terendah 0 dan tertinggi 20.
- `Admission_grade` rata-rata sekitar 13.9, juga dengan nilai terendah 0 dan tertinggi 20.
- `Curricular_units_1st_sem_grade` memiliki rata-rata 12.8, menunjukkan performa akademik mahasiswa di semester pertama.
- `Unemployment_rate` dan `Inflation_rate` memiliki nilai rata-rata yang lebih stabil dan kemungkinan terkait dengan kondisi ekonomi makro.

4. Tidak Ada Nilai Null

- Berdasarkan hasil dari `df.isnull().sum()`, dataset ini tidak memiliki nilai null pada seluruh kolom. Semua kolom memiliki data yang lengkap, yang memudahkan analisis lebih lanjut karena tidak perlu menangani nilai yang hilang atau melakukan imputasi.

5. Distribusi dan Variasi

- Dari kolom-kolom seperti `Curricular_units_1st_sem_approved` dan `Curricular_units_2nd_sem_approved`, kita bisa mempelajari seberapa banyak mahasiswa yang berhasil menyelesaikan mata kuliah mereka di masing-masing semester.
- Kolom `Displaced` bisa mengindikasikan apakah mahasiswa berasal dari lokasi yang terkena dampak krisis atau permasalahan sosial lainnya.
- `Tuition_fees_up_to_date` menunjukkan apakah mahasiswa membayar uang kuliah mereka tepat waktu, yang bisa menjadi indikator finansial mahasiswa.

6. **Status** :
- Target: berupa status mahasiswa saat ini
- kategorikal dengan nilai: dropout, enrolled, graduate


---

**Analisis:**

Berdasarkan analisis diatas tidak terdapat kasus missing value, duplicated dan invalid data pada dataset.

## Univariate Exploratory Data Analysis
"""

print(df['Status'].unique())
print(df['Status'].value_counts())

# Plotting the value counts of 'Status'
plt.figure(figsize=(8, 6))
status_counts = df['Status'].value_counts()
status_counts.plot(kind='bar', color=['skyblue', 'salmon', 'pink'])

# Adding the count on top of each bar
for i, v in enumerate(status_counts):
    plt.text(i, v + 50, str(v), ha='center', va='bottom', fontsize=12)

plt.title('Distribution of Status')
plt.xlabel('Status')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.show()

"""Analisis: Data pada Graduate terdapat 2209 sedangkat Dropout 1421 cukup seimbang (60:40), jadi sudah cukup ideal untuk training, tidak perlu melakukan imbalance handling menggunakan SMOTE karena sudah cukup seimbang."""

df_analize =df[df.Status != 'Enrolled']
df_analize.shape

"""**Categorical Feature**

Fitur-fitur dalam dataset ini memiliki tipe numerik, namun setelah dianalisis lebih lanjut, nilai-nilai pada fitur tersebut merepresentasikan kategori tertentu. Oleh karena itu, pada tahap analisis ini, fitur-fitur tersebut akan diperlakukan sebagai data kategorik.
"""

kategorik_fitur =  ['Status',
                    'Application_mode',
                    'Application_order',
                    'Course',
                    'Daytime_evening_attendance',
                    'Previous_qualification',
                    'Nacionality',
                    'Mothers_qualification',
                    'Fathers_qualification',
                    'Mothers_occupation',
                    'Fathers_occupation',
                    'Displaced',
                    'Educational_special_needs',
                    'Debtor',
                    'Tuition_fees_up_to_date',
                    'Gender',
                    'Scholarship_holder',
                    'Age_at_enrollment',
                    'International']

rows, cols = 7, 3
fig, axes = plt.subplots(rows, cols, figsize=(24, 20))
axes = axes.flatten()

for i, col in enumerate(kategorik_fitur):
    ax = axes[i]
    sns.countplot(x=col, data=df_analize, hue=col, palette='pastel', legend=False, ax=ax)

    for p in ax.patches:
        height = p.get_height()
        ax.text(p.get_x() + p.get_width() / 2., height + 1, f'{int(height)}',
                ha='center', va='bottom', fontsize=9)

    ax.set_title(f'Distribusi {col}')
    ax.set_xlabel('')
    ax.set_ylabel('')
    ax.tick_params(axis='x', rotation=45)

for j in range(len(kategorik_fitur), len(axes)):
    fig.delaxes(axes[j])

plt.tight_layout()
plt.show()

"""Distribusi tersebut berisi beberapa visualisasi distribusi data yang menggambarkan berbagai kategori dan variabel dalam dataset. Berikut adalah analisis berdasarkan plot yang ada:

1. **Distribusi Status**: Mayoritas data memiliki status "Degree", sementara "Graduate" sangat sedikit. Ini menunjukkan bahwa sebagian besar individu dalam dataset ini masih dalam tahap pendidikan tingkat sarjana.

2. **Distribusi Application\_mode**: Metode aplikasi yang dominan adalah mode tertentu (kemungkinan online), mengingat jumlah yang jauh lebih tinggi dibandingkan dengan mode lainnya.

3. **Distribusi Application\_order**: Mayoritas aplikasi ada pada urutan pertama, yang mungkin menunjukkan bahwa sebagian besar pendaftar lebih memilih untuk diterima pada tahap pertama atau pendaftaran mereka diurutkan berdasarkan waktu.

4. **Distribusi Course**: Ada distribusi yang cukup merata, tetapi beberapa program studi tampak lebih populer dibandingkan yang lain, dengan puncak pada beberapa nilai yang menunjukkan program yang lebih diminati.

5. **Distribusi Daytime\_evening\_attendance**: Hampir seluruh data menunjukkan bahwa pendaftar hadir di siang hari (daytime), dengan sedikit yang hadir pada malam hari (evening), menandakan pilihan mayoritas waktu kuliah.

6. **Distribusi Previous qualification**: Terdapat konsentrasi tinggi pada kualifikasi tertentu yang mendominasi dataset, seperti mungkin tingkat pendidikan tertentu yang lebih banyak diambil oleh pendaftar.

7. **Distribusi Nationality**: Tampaknya sebagian besar pendaftar berasal dari negara tertentu, dengan sebagian kecil yang berasal dari negara lainnya.

8. **Distribusi Mothers\_qualification**: Sebagian besar ibu memiliki kualifikasi yang lebih rendah, dengan sedikit yang memiliki kualifikasi lebih tinggi. Ini dapat mencerminkan tren pendidikan atau status sosial ekonomi.

9. **Distribusi Fathers\_qualification**: Data menunjukkan dominasi kualifikasi tertentu pada ayah, dengan sebagian besar memiliki kualifikasi rendah hingga menengah.

10. **Distribusi Mothers\_occupation**: Sebagian besar ibu tidak bekerja, yang bisa menunjukkan bahwa sebagian besar rumah tangga berpendapatan rendah atau ibu rumah tangga tidak terlibat dalam pasar kerja.

11. **Distribusi Fathers\_occupation**: Sebagian besar ayah bekerja di bidang tertentu, yang kemungkinan terkait dengan distribusi pekerjaan atau kelas sosial ekonomi keluarga.

12. **Distribusi Displaced**: Mayoritas data tidak mengalami pemindahan, dengan hanya sebagian kecil yang terdampak. Ini mungkin mengacu pada faktor migrasi atau perpindahan akibat bencana atau alasan lainnya.

13. **Distribusi Educational\_special\_needs**: Sebagian besar individu dalam dataset ini tidak memiliki kebutuhan pendidikan khusus, dengan sebagian kecil yang memerlukan layanan tersebut.

14. **Distribusi Debtor**: Sebagian besar orang dalam dataset ini tidak terlibat dalam masalah utang, dengan beberapa orang yang tercatat sebagai debitur.

15. **Distribusi Tuition\_fees\_up\_to\_date**: Hampir seluruh data menunjukkan bahwa biaya kuliah dibayar tepat waktu, sementara hanya sebagian kecil yang belum dibayar.

16. **Distribusi Gender**: Mayoritas data didominasi oleh satu gender tertentu, dengan perbandingan yang cukup besar antara kedua jenis kelamin.

17. **Distribusi Scholarship\_holder**: Sebagian besar individu tidak menerima beasiswa, sementara sebagian kecil yang tercatat sebagai penerima beasiswa.

18. **Distribusi Age\_at\_enrollment**: Rentang usia pendaftar cukup beragam, dengan konsentrasi tinggi pada rentang usia tertentu yang menunjukkan usia ideal untuk pendaftaran pendidikan.

19. **Distribusi International**, data menunjukkan sebagian besar pendaftar berasal dari luar negeri (dengan nilai dominan pada kategori '0', yang mungkin berarti "tidak internasional"), sementara hanya sedikit pendaftar yang berasal dari luar negeri (dengan nilai yang lebih kecil pada kategori '1', yang mungkin berarti "internasional").

**Numerical Feature**

Distribusi Data Numerik
"""

numerik_fitur = ['Previous_qualification_grade',
                 'Admission_grade',
                 'Age_at_enrollment',
                 'Curricular_units_1st_sem_credited',
                 'Curricular_units_1st_sem_enrolled',
                 'Curricular_units_1st_sem_evaluations',
                 'Curricular_units_1st_sem_approved',
                 'Curricular_units_1st_sem_grade',
                 'Curricular_units_1st_sem_without_evaluations',
                 'Curricular_units_2nd_sem_credited',
                 'Curricular_units_2nd_sem_enrolled',
                 'Curricular_units_2nd_sem_evaluations',
                 'Curricular_units_2nd_sem_approved',
                 'Curricular_units_2nd_sem_grade',
                 'Curricular_units_2nd_sem_without_evaluations',
                 'Unemployment_rate',
                 'Inflation_rate',
                 'GDP']

rows, cols = 6, 3
fig, axes = plt.subplots(rows, cols, figsize=(24, 20))
axes = axes.flatten()

for i, col in enumerate(numerik_fitur):
    sns.histplot(df_analize[col], kde=True, ax=axes[i], bins=30, color='pink')
    axes[i].set_title(f'Distribusi {col}')
    axes[i].set_xlabel('')
    axes[i].set_ylabel('')

for j in range(len(numerik_fitur), len(axes)):
    fig.delaxes(axes[j])

plt.tight_layout()
plt.show()

"""Berdasarkan visualisasi tsb, berikut adalah analisis untuk beberapa distribusi data yang ditampilkan:

1. **Distribusi Previous qualification grade**: Data menunjukkan distribusi nilai kualifikasi sebelumnya yang bervariasi. Beberapa nilai menunjukkan konsentrasi tinggi di sekitar angka tertentu, tetapi ada juga penyebaran nilai yang lebih lebar.

2. **Distribusi Admission grade**: Terdapat konsentrasi tinggi pada nilai sekitar 120-140, yang mungkin menunjukkan bahwa sebagian besar pendaftar memiliki nilai penerimaan yang berada di rentang tersebut.

3. **Distribusi Age at enrollment**: Sebagian besar pendaftar berusia muda (sekitar 18-20 tahun) dengan penurunan jumlah pendaftar pada usia yang lebih tua.

4. **Distribusi Curricular units 1st sem enrolled**: Jumlah mata kuliah yang diambil pada semester pertama menunjukkan konsentrasi yang tinggi pada nilai rendah (1-4 mata kuliah), yang mungkin mencerminkan kebijakan program studi atau tingkat kesulitan mata kuliah.

5. **Distribusi Curricular units 1st sem credited**: Sebagian besar siswa menerima kredit untuk sedikit mata kuliah, dengan konsentrasi pada nilai 1-3 mata kuliah.

6. **Distribusi Curricular units 1st sem approved**: Data menunjukkan bahwa sebagian besar siswa berhasil menyelesaikan sebagian besar mata kuliah pada semester pertama.

7. **Distribusi Curricular units 2nd sem enrolled**: Angka yang lebih tinggi pada semester kedua menunjukkan bahwa lebih banyak mata kuliah yang diambil, dengan konsentrasi lebih pada nilai rendah.

8. **Distribusi Curricular units 2nd sem credited**: Tercatat banyak siswa yang mendapat kredit untuk sebagian besar mata kuliah pada semester kedua.

9. **Distribusi Curricular units 2nd sem approved**: Beberapa siswa tampaknya mengalami kesulitan atau tantangan dalam menyelesaikan mata kuliah pada semester kedua, dengan distribusi yang lebih terdistribusi.

10. **Distribusi Unemployment rate**: Terdapat variasi yang tajam dalam tingkat pengangguran dari waktu ke waktu, dengan beberapa lonjakan pada periode tertentu, yang mungkin mencerminkan kondisi ekonomi negara atau wilayah.

11. **Distribusi Inflation rate**: Tingkat inflasi bervariasi dengan fluktuasi yang terlihat jelas pada beberapa titik waktu, yang menunjukkan adanya ketidakstabilan ekonomi.

12. **Distribusi GDP**: PDB menunjukkan pola siklus dengan beberapa periode yang sangat tinggi dan rendah, mencerminkan pertumbuhan atau penurunan ekonomi yang tajam dalam periode tersebut.

Secara keseluruhan, dataset ini menunjukkan distribusi yang sangat bervariasi, dengan beberapa variabel yang memiliki distribusi normal atau simetris, sementara yang lain menunjukkan pola distribusi yang lebih condong ke satu sisi atau memiliki beberapa lonjakan. Hal ini mengindikasikan faktor eksternal atau kebijakan yang dapat memengaruhi data yang ada, seperti kebijakan pendidikan atau ekonomi yang berubah-ubah.

## Multifariate Exploaratory Data Analysis

**Distribusi Data Kategorikal Berdasarkan Status**
"""

numerik_kategorical_kategori = ['Marital_status',
                                'Application_mode',
                                'Course',
                                'Daytime_evening_attendance',
                                'Previous_qualification',
                                'Nacionality',
                                'Mothers_qualification',
                                'Fathers_qualification',
                                'Mothers_occupation',
                                'Fathers_occupation',
                                'Displaced',
                                'Educational_special_needs',
                                'Debtor',
                                'Tuition_fees_up_to_date',
                                'Gender',
                                'Scholarship_holder',
                                'Age_at_enrollment',
                                'International']

rows, cols = 6, 3
fig, axes = plt.subplots(rows, cols, figsize=(24, 20))
axes = axes.flatten()

for i, col in enumerate(numerik_kategorical_kategori):
    ax = axes[i]
    sns.countplot(x=col, data=df_analize, hue='Status', palette='pastel', ax=ax)
    ax.set_title(f'{col} vs Status', fontsize=11)
    ax.set_xlabel('')
    ax.set_ylabel('')
    ax.tick_params(axis='x', rotation=45)

for j in range(len(numerik_kategorical_kategori), len(axes)):
    fig.delaxes(axes[j])

plt.tight_layout()
plt.show()

"""Uji Staistik dengan Chi-Square dan Cramér’s V"""

def cramers_v(x, y):
    table = pd.crosstab(x, y)
    chi2, _, _, _ = chi2_contingency(table)
    n = table.sum().sum()
    phi2 = chi2 / n
    r, k = table.shape
    # Koreksi bias untuk tabel tidak persegi
    phi2_corr = max(0, phi2 - ((k-1)*(r-1))/(n-1))
    r_corr = r - ((r-1)**2)/(n-1)
    k_corr = k - ((k-1)**2)/(n-1)
    return np.sqrt(phi2_corr / min((k_corr-1), (r_corr-1)))

# fitur kategorikal (kecuali Status)
kategorik_fitur = ['Marital_status',
                   'Application_mode',
                   'Course',
                   'Daytime_evening_attendance',
                   'Previous_qualification',
                   'Nacionality',
                   'Mothers_qualification',
                   'Fathers_qualification',
                   'Mothers_occupation',
                   'Fathers_occupation',
                   'Displaced',
                   'Educational_special_needs',
                   'Debtor',
                   'Tuition_fees_up_to_date',
                   'Gender',
                   'Scholarship_holder',
                   'Age_at_enrollment',
                   'International']

hasil_chi2 = []

for col in kategorik_fitur:
    table = pd.crosstab(df_analize['Status'], df[col])
    chi2, p, dof, expected = chi2_contingency(table)
    v = cramers_v(df[col], df_analize['Status'])

    hasil_chi2.append({
        'Fitur': col,
        'Chi2': chi2,
        'p-value': p,
        "Cramér's V": v
    })

hasil_df = pd.DataFrame(hasil_chi2)

hasil_df = hasil_df.sort_values('p-value')

print(hasil_df)

"""Berdasarkan hasil analisis Chi-Square, p-value, dan Cramér's V pada fitur-fitur dalam dataset, berikut adalah beberapa analisis yang dapat ditarik:

1. **Tuition\_fees\_up\_to\_date**:

   * Chi2: 706.96, p-value: 9.19e-156, Cramér's V: 0.441
   * Fitur ini menunjukkan hubungan yang sangat kuat dengan status mahasiswa, karena p-value sangat kecil (signifikan) dan nilai Cramér's V yang cukup besar menunjukkan asosiasi yang kuat.

2. **Course**:

   * Chi2: 442.95, p-value: 3.50e-84, Cramér's V: 0.343
   * Ada hubungan signifikan antara pilihan kursus dan status mahasiswa, meskipun kekuatan asosiasi (Cramér's V) masih moderat.

3. **Scholarship\_holder**:

   * Chi2: 354.22, p-value: 5.11e-79, Cramér's V: 0.312
   * Fitur ini menunjukkan asosiasi signifikan dengan status mahasiswa, dan hubungan ini cukup kuat (Cramér's V di atas 0.3).

4. **Age\_at\_enrollment**:

   * Chi2: 476.66, p-value: 1.85e-73, Cramér's V: 0.345
   * Umur pada saat pendaftaran berhubungan signifikan dengan status mahasiswa, dengan Cramér's V yang menunjukkan hubungan yang moderat hingga kuat.

5. **Application\_mode**:

   * Chi2: 392.07, p-value: 8.43e-73, Cramér's V: 0.321
   * Metode aplikasi juga memiliki asosiasi yang signifikan dengan status mahasiswa, dengan tingkat kekuatan asosiasi yang moderat.

6. **Debtor**:

   * Chi2: 257.46, p-value: 6.14e-58, Cramér's V: 0.266
   * Status sebagai debitur berhubungan dengan status mahasiswa, meskipun asosiasinya cukup lemah (Cramér's V di bawah 0.3).

7. **Gender**:

   * Chi2: 229.35, p-value: 8.26e-52, Cramér's V: 0.251
   * Gender memiliki hubungan signifikan dengan status mahasiswa, dengan asosiasi yang relatif lemah (Cramér's V di bawah 0.3).

8. **Previous\_qualification**:

   * Chi2: 150.60, p-value: 5.95e-24, Cramér's V: 0.193
   * Kualifikasi sebelumnya memiliki hubungan yang cukup signifikan dengan status mahasiswa, namun kekuatan asosiasinya cenderung lemah.

9. **Mothers\_qualification & Fathers\_qualification**:

   * Keduanya menunjukkan hubungan yang signifikan dengan status mahasiswa (p-value sangat kecil), tetapi dengan tingkat asosiasi yang cenderung rendah hingga moderat (Cramér's V di bawah 0.2-0.3).

10. **Displaced & Marital\_status**:

* Kedua fitur ini memiliki p-value yang signifikan, namun kekuatan hubungan (Cramér's V) cenderung lemah, menunjukkan asosiasi yang tidak terlalu kuat dengan status mahasiswa.

11. **Educational\_special\_needs & International**:

* Kedua fitur ini memiliki p-value lebih besar (di atas 0.05), menunjukkan bahwa mereka tidak memiliki hubungan signifikan dengan status mahasiswa.

Secara keseluruhan, fitur-fitur dengan p-value sangat kecil (misalnya, **Tuition\_fees\_up\_to\_date**, **Course**, **Scholarship\_holder**) menunjukkan hubungan yang sangat signifikan dengan status mahasiswa, dengan kekuatan asosiasi yang cukup besar. Fitur-fitur seperti **Gender**, **Marital\_status**, dan **Displaced** menunjukkan asosiasi yang lebih lemah, meskipun masih signifikan. Beberapa fitur lainnya menunjukkan hubungan yang lemah atau tidak signifikan.

**Korelasi Antar fitur Numerik**
"""

# Pilih kolom numerik dengan benar
numerik_cols = [
    'Previous_qualification_grade',
    'Admission_grade',
    'Age_at_enrollment',
    'Curricular_units_1st_sem_credited',
    'Curricular_units_1st_sem_enrolled',
    'Curricular_units_1st_sem_evaluations',
    'Curricular_units_1st_sem_approved',
    'Curricular_units_1st_sem_grade',
    'Curricular_units_1st_sem_without_evaluations',
    'Curricular_units_2nd_sem_credited',
    'Curricular_units_2nd_sem_enrolled',
    'Curricular_units_2nd_sem_evaluations',
    'Curricular_units_2nd_sem_approved',
    'Curricular_units_2nd_sem_grade',
    'Curricular_units_2nd_sem_without_evaluations',
    'Unemployment_rate',
    'Inflation_rate',
    'GDP'
]

df_numerik = df_analize[numerik_cols]

corr_matrix = df_numerik.corr()

plt.figure(figsize=(14, 12))
sns.heatmap(corr_matrix, annot=True, fmt=".2f", cmap='coolwarm', square=True, linewidths=0.5)
plt.title("Matriks Korelasi Fitur Numerik")
plt.tight_layout()
plt.show()

corr_matrix = df_numerik.corr()
corr_abs = corr_matrix.abs()
corr_unstacked = corr_abs.unstack()
sorted_corr = corr_unstacked.sort_values(ascending=False)

strong_corr = sorted_corr[(sorted_corr < 1) & (sorted_corr > 0.7)]  # corr > 0.7 sebagai strong correlation

print("Strongest Correlations:\n", strong_corr)

"""Hasil analisis correlasi fitur-fitur numerik dengan hubungan fitur yang sangat tinggi yaitu libuh dari 0.7 hingga mencapai 0.94. Hasil ini menunjukkan indikasi kuat multikolinearitas.

Hal ini terjadi karena fitur-fitur ini mencerminkan aktivitas akademik yang mirip tetapi di semester yang berbeda, sehingga informasi yang diberikan menjadi redundan.

Perlu pertimbangan untuk reduksi kolom untuk memastikan informasi data tidak redudan.

**Korelasi Antar Fitur Numerik terhadap Fitur Status**
"""

df_analize['Target_Binary'] = df_analize['Status'].map({'Graduate': 0, 'Dropout': 1})

df_analize['Target_Binary'] = df_analize['Status'].map({'Graduate': 1, 'Dropout': 0})

numerik_cols = [
    'Previous_qualification_grade',
    'Admission_grade',
    'Age_at_enrollment',
    'Curricular_units_1st_sem_credited',
    'Curricular_units_1st_sem_enrolled',
    'Curricular_units_1st_sem_evaluations',
    'Curricular_units_1st_sem_approved',
    'Curricular_units_1st_sem_grade',
    'Curricular_units_1st_sem_without_evaluations',
    'Curricular_units_2nd_sem_credited',
    'Curricular_units_2nd_sem_enrolled',
    'Curricular_units_2nd_sem_evaluations',
    'Curricular_units_2nd_sem_approved',
    'Curricular_units_2nd_sem_grade',
    'Curricular_units_2nd_sem_without_evaluations',
    'Unemployment_rate',
    'Inflation_rate',
    'GDP',
    'Target_Binary'
]

df_numerik = df_analize[numerik_cols]

corr_with_status = df_numerik.corr()['Target_Binary'].sort_values(ascending=False)

print(corr_with_status)

"""Hasil analisis:


* Fitur-fitur yang berkaitan dengan aspek akademik, seperti nilai dan kelulusan mata kuliah di semester 1 dan 2, merupakan faktor yang paling berpengaruh. Beberapa fitur yang mencerminkan hal ini adalah `Curricular_units_2nd_sem_approved`, `Curricular_units_2nd_sem_grade`, `Curricular_units_1st_sem_approved`, dan `Curricular_units_1st_sem_grade`.

* Mahasiswa yang lebih tua saat memulai kuliah dan tidak mengikuti evaluasi memiliki risiko lebih tinggi untuk mengalami dropout. Fitur yang terkait dengan hal ini adalah `Age_at_enrollment`.

* Faktor-faktor makroekonomi, seperti `GDP`, `Unemployment_rate`, dan `Inflation_rate`, memiliki kontribusi yang sangat kecil terhadap risiko dropout. Selain itu, fitur-fitur akademik terkait kredit mata kuliah, yaitu `Curricular_units_1st_sem_credited` dan `Curricular_units_2nd_sem_credited`, juga menunjukkan kontribusi yang rendah.

# 3. Data Preparation / Preprocessing

Berikut adalah beberapa tahapan yang akan dilakukan pada tahapan preparation/prerocessing:

1. Fitur Selection
2. Encoding Fitur Kategorikal
3. Data Splitting
4. Scaling Fitur Numerikal

## 3. 1. Fitur Selection

Fitur Selection bertujuan untuk menghapus fitur tertentu dan menggabungkan beberapa fitur menjadi fitur baru untuk mengurangi redudansi informasi.
"""

features_to_drop = ['Nacionality',
                    'International',
                    'Educational_special_needs',
                    'Daytime_evening_attendance',
                    'Curricular_units_1st_sem_credited',
                    'Curricular_units_2nd_sem_credited',
                    'Curricular_units_1st_sem_without_evaluations',
                    'Curricular_units_2nd_sem_without_evaluations',
                    'Curricular_units_1st_sem_evaluations',
                    'Curricular_units_2nd_sem_evaluations',
                    'Target_Binary']

df_dropped = df_analize.drop(columns=features_to_drop)
df_dropped.head()

df_dropped['Score_Economy_pressure'] = df_dropped['Unemployment_rate'] + df_dropped['Inflation_rate'] - df_dropped['GDP']

df_dropped['Total_enrolled_Curricular_units'] = df_dropped['Curricular_units_1st_sem_enrolled'] + df_dropped['Curricular_units_2nd_sem_enrolled']
df_dropped['Total_approved_Curricular_units'] = df_dropped['Curricular_units_1st_sem_approved'] + df_dropped['Curricular_units_2nd_sem_approved']
df_dropped['Approval_rate'] = np.where( df_dropped['Total_enrolled_Curricular_units'] > 0, (df_dropped['Total_approved_Curricular_units'] / df_dropped['Total_enrolled_Curricular_units']) * 100, 0)

df_dropped['Average_grade'] = (df_dropped['Curricular_units_1st_sem_grade'] + df_dropped['Curricular_units_2nd_sem_grade']) / 2

features_to_drop = ['Unemployment_rate',
                    'Inflation_rate',
                    'GDP',
                    'Curricular_units_1st_sem_enrolled',
                    'Curricular_units_2nd_sem_enrolled',
                    'Curricular_units_1st_sem_approved',
                    'Curricular_units_2nd_sem_approved',
                    'Curricular_units_1st_sem_grade',
                    'Curricular_units_2nd_sem_grade',]

df_combined = df_dropped.drop(columns=features_to_drop)
df_combined.head()

df_combined['Target_Binary'] = df_combined['Status'].map({'Graduate': 1, 'Dropout': 0})
numerik_cols = [
    'Previous_qualification_grade',
    'Admission_grade',
    'Age_at_enrollment',
    'Total_enrolled_Curricular_units',
    'Total_approved_Curricular_units',
    'Approval_rate',
    'Average_grade',
    'Score_Economy_pressure',
    'Target_Binary'
]

df_numerik = df_combined[numerik_cols]

corr_with_status = df_numerik.corr()['Target_Binary'].sort_values(ascending=False)
print(corr_with_status)

features_to_drop = ['Total_enrolled_Curricular_units',
                    'Admission_grade',
                    'Previous_qualification_grade',
                    'Score_Economy_pressure',
                    'Target_Binary']

df_selected = df_combined.drop(columns=features_to_drop)
df_selected.head()

"""## 3. 2. Encoding Fitur Kategorikal

Proses ini bertujuan untuk melakukan encoding terdadap fitur target
"""

encoder = LabelEncoder()

df_selected['Status'] = encoder.fit_transform(df_selected['Status'])
df_selected.head()

"""## 3. 3. Data Splitting

Pada part ini bertujuan untuk membagi data training dan test dengan rasio 80:20.
"""

X = df_selected.drop(columns=['Status'])
y = df_selected['Status']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""## 3. 4. Scaling Fitur Numerikal

Pada part ini bertujuan untuk melakukan Scaling seluruh fitur agar terdistribusi normal dan dapat meningkatkan performa model yang dilatih dengan menggunakan algoritma machine learning.
"""

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""# 4. Modelling

Pada tahapan ini akan dilakukan pelatihan model menggunakan beberapa algoritma yang antara lain:

*   Logistic Regression
*   Random Forest
*   Support Vector Machine
"""

model_lg = LogisticRegression(random_state=42)
model_lg.fit(X_train_scaled, y_train)

model_rf = RandomForestClassifier(random_state=42)
model_rf.fit(X_train_scaled, y_train)

model_svm = SVC(kernel='linear', random_state=42)
model_svm.fit(X_train_scaled, y_train)

"""# 6. Evaluation

Proses ini bertujuan untuk melakukan evaluasi terhadap model yang telah dihasilkan pada tahap sebelumnya. Evaluasi dilakukan dengan membandingkan akurasi, presisi, recall, F-1 Score dan confussion matrix.
"""

def evaluate_model(name, model, X_test, y_test):
    y_pred = model.predict(X_test)
    return {
        'Model': name,
        'Accuracy': accuracy_score(y_test, y_pred),
        'Precision': precision_score(y_test, y_pred),
        'Recall': recall_score(y_test, y_pred),
        'F1 Score': f1_score(y_test, y_pred)
    }

results = []

results.append(evaluate_model('Logistic Regression', model_lg, X_test_scaled, y_test))
results.append(evaluate_model('Random Forest', model_rf, X_test_scaled, y_test))
results.append(evaluate_model('Support Vector Machine', model_svm, X_test_scaled, y_test))

df_results = pd.DataFrame(results)
print(df_results)

import pandas as pd
import matplotlib.pyplot as plt

# Ubah list of dict ke DataFrame
df_results = pd.DataFrame(results)

# Plot bar chart untuk semua metrik
metrics = ['Accuracy', 'Precision', 'Recall', 'F1 Score']
for metric in metrics:
    plt.figure(figsize=(8, 4))
    plt.bar(df_results['Model'], df_results[metric], color='skyblue')
    plt.title(f'{metric} Comparison')
    plt.ylim(0.85, 1.0)
    plt.ylabel(metric)
    plt.xlabel('Model')
    for i, value in enumerate(df_results[metric]):
        plt.text(i, value + 0.002, f"{value:.4f}", ha='center')
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.tight_layout()
    plt.show()

"""Hasil Analisis :


**Accuracy**

* **Akurasi tertinggi** sebesar **91.5978%** telah dicapai oleh model **Random Forest**, sehingga performa keseluruhan dalam mengklasifikasikan mahasiswa dropout dan tidak dropout dianggap paling baik.
* Akurasi terendah tercatat pada model **Support Vector Machine (90.63%)**, meskipun tetap berada pada tingkat yang cukup tinggi.

**Precision**

* Tingkat **ketepatan tertinggi (91.28%)** telah ditunjukkan oleh **Random Forest**, yang berarti prediksi dropout yang diberikan cenderung lebih akurat, dengan kesalahan prediksi positif yang lebih sedikit.
* Precision paling rendah diperoleh oleh **Support Vector Machine (88.64%)**, yang menunjukkan bahwa lebih banyak **false positive** telah dihasilkan oleh model ini.

**Recall**

* Recall tertinggi (**97.33%**) telah dicapai oleh **Support Vector Machine**, menandakan bahwa sebagian besar kasus dropout berhasil dideteksi.
* Dengan demikian, model ini dianggap paling sensitif dalam mengidentifikasi mahasiswa yang berisiko dropout.

**F1 Score**

* Nilai **F1 Score tertinggi (0.9336)** telah dicapai oleh **Random Forest**, yang menunjukkan bahwa keseimbangan terbaik antara precision dan recall telah dicapai oleh model tersebut.
* Meskipun memiliki precision yang lebih rendah, **Support Vector Machine** tetap menunjukkan nilai F1 yang tinggi karena recall yang sangat besar.

 **Kesimpulan**

* Secara keseluruhan, performa terbaik telah ditunjukkan oleh **Random Forest**, yang menghasilkan nilai tertinggi pada hampir semua metrik evaluasi.
* Jika prioritas utama adalah mengidentifikasi semua mahasiswa dropout (minim **false negative**), maka **Support Vector Machine** lebih disarankan karena tingkat recall yang tinggi telah dicapai.
* **Logistic Regression**, meskipun tidak menjadi yang tertinggi, tetap dianggap sebagai model yang layak dengan kinerja yang baik dan struktur yang lebih sederhana.


"""

def plot_confusion_matrix(model, X_test, y_test, title):
    y_pred = model.predict(X_test)
    cm = confusion_matrix(y_test, y_pred)

    plt.figure(figsize=(5,4))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.title(f'Confusion Matrix: {title}')
    plt.xlabel('Predicted Label')
    plt.ylabel('True Label')
    plt.show()

plot_confusion_matrix(model_lg, X_test_scaled, y_test, 'Logistic Regression')
plot_confusion_matrix(model_rf, X_test_scaled, y_test, 'Random Forest')
plot_confusion_matrix(model_svm, X_test_scaled, y_test, 'Support Vector Machine')

"""Hasil analisis dari ketiga confusion matrix model klasifikasi (Logistic Regression, Random Forest, dan Support Vector Machine) berdasarkan jumlah True Positive (TP), True Negative (TN), False Positive (FP), dan False Negative (FN):



**1. Logistic Regression**

* **TP (1 diprediksi 1):** 430
* **TN (0 diprediksi 0):** 233
* **FP (0 diprediksi 1):** 44
* **FN (1 diprediksi 0):** 19

**Analisis:**

* Logistic Regression memiliki performa yang cukup baik.
* Namun, **jumlah FP (44)** lebih tinggi dibanding model lain, menunjukkan model ini cenderung **sedikit overpredict** pada kelas 1.
* **FN-nya rendah (19)**, artinya cukup andal dalam mengenali mahasiswa yang benar-benar dropout.



**2. Random Forest**

* **TP:** 429
* **TN:** 236
* **FP:** 41
* **FN:** 20

**Analisis:**

* Random Forest menunjukkan performa **keseimbangan** yang baik antara FP dan FN.
* **TN tertinggi (236)** di antara ketiga model.
* Secara umum, model ini **paling stabil** dan akurat dalam memisahkan dua kelas tanpa terlalu banyak kesalahan.



**3. Support Vector Machine (SVM)**

* **TP:** 437
* **TN:** 221
* **FP:** 56
* **FN:** 12

**Analisis:**

* SVM memiliki **jumlah TP tertinggi (437)** dan **FN terendah (12)**, artinya **sangat kuat dalam mendeteksi dropout** (positif class).
* Namun, **FP-nya paling tinggi (56)**, yang berarti cukup banyak mahasiswa yang sebenarnya tidak dropout malah diprediksi dropout (false alarm).
* Cocok jika **tujuan utama adalah mencegah dropout**, meskipun dengan konsekuensi false alert lebih banyak.


 **Kesimpulan:**

| Model               | TP  | TN  | FP | FN | Keterangan Singkat                 |
| ------------------- | --- | --- | -- | -- | ---------------------------------- |
| Logistic Regression | 430 | 233 | 44 | 19 | Seimbang, sedikit overpredict      |
| Random Forest       | 429 | 236 | 41 | 20 | Paling stabil & akurat             |
| SVM                 | 437 | 221 | 56 | 12 | Paling sensitif mendeteksi dropout |


<br>

* Jika **akurasi menyeluruh dan keseimbangan** dibutuhkan: **Random Forest** direkomendasikan.
* Jika **minimalkan risiko tidak mendeteksi dropout** (FN): **SVM** lebih unggul.
* Jika ingin model sederhana dan cukup baik secara umum: **Logistic Regression** masih layak.


"""

coefficients = model_lg.coef_[0]
features = X_train.columns

feature_importance_df = pd.DataFrame({
    'Feature': features,
    'Coefficient': coefficients,
    'Abs_Coefficient': np.abs(coefficients)
}).sort_values(by='Abs_Coefficient', ascending=False)

plt.figure(figsize=(10,6))
sns.barplot(x='Abs_Coefficient', y='Feature', data=feature_importance_df.head(15))
plt.title('Top 15 Important Features (Logistic Regression)')
plt.tight_layout()
plt.show()

feature_importance_df.head(15)

"""**Menjalankan Proses Prediksi**

Tahapan ini bertujuan untuk melakukan prediksi terhadap data dengan Status Enrolled. Prediksi akan menghasilkan kolom baru yaitu:

1. riskPrediction : Hasil prediksi bernilai 0 (Graduate) dan 1 (Dropout)
2.  riskStatus : riskPrediction yang di lakukan mapping agar dengan 0:Graduate dan 1:Dropout
3. riskProbability : Hasil prediksi berupa probabilitas
"""

df_enrolled =df[df.Status == 'Enrolled']

features_to_drop = ['Nacionality',
                    'International',
                    'Educational_special_needs',
                    'Daytime_evening_attendance',
                    'Curricular_units_1st_sem_credited',
                    'Curricular_units_2nd_sem_credited',
                    'Curricular_units_1st_sem_without_evaluations',
                    'Curricular_units_2nd_sem_without_evaluations',
                    'Curricular_units_1st_sem_evaluations',
                    'Curricular_units_2nd_sem_evaluations',]

df_dropped_enrolled = df_enrolled.drop(columns=features_to_drop)

df_dropped_enrolled['Score_Economy_pressure'] = df_dropped_enrolled['Unemployment_rate'] + df_dropped_enrolled['Inflation_rate'] - df_dropped_enrolled['GDP']

df_dropped_enrolled['Total_enrolled_Curricular_units'] = df_dropped_enrolled['Curricular_units_1st_sem_enrolled'] + df_dropped_enrolled['Curricular_units_2nd_sem_enrolled']
df_dropped_enrolled['Total_approved_Curricular_units'] = df_dropped_enrolled['Curricular_units_1st_sem_approved'] + df_dropped_enrolled['Curricular_units_2nd_sem_approved']
df_dropped_enrolled['Approval_rate'] = np.where( df_dropped_enrolled['Total_enrolled_Curricular_units'] > 0, (df_dropped_enrolled['Total_approved_Curricular_units'] / df_dropped_enrolled['Total_enrolled_Curricular_units']) * 100, 0)
df_dropped_enrolled['Average_grade'] = (df_dropped_enrolled['Curricular_units_1st_sem_grade'] + df_dropped_enrolled['Curricular_units_2nd_sem_grade']) / 2

features_to_drop = ['Unemployment_rate',
                    'Inflation_rate',
                    'GDP',
                    'Curricular_units_1st_sem_enrolled',
                    'Curricular_units_2nd_sem_enrolled',
                    'Curricular_units_1st_sem_approved',
                    'Curricular_units_2nd_sem_approved',
                    'Curricular_units_1st_sem_grade',
                    'Curricular_units_2nd_sem_grade',
		    'Total_enrolled_Curricular_units',
                    'Admission_grade',
                    'Previous_qualification_grade',
                    'Score_Economy_pressure',
                    'Status']

df_selected_enrolled = df_dropped_enrolled.drop(columns=features_to_drop)
df_selected_enrolled.head()

X_enrolled_scaled = scaler.transform(df_selected_enrolled)

df_enrolled['riskPrediction'] = model_lg.predict(X_enrolled_scaled)
df_enrolled['riskProbability'] = model_lg.predict_proba(X_enrolled_scaled)[:, 1]

df_enrolled['riskStatus'] = df_enrolled['riskPrediction'].map({0: 'Dropout', 1: 'Graduate'})

df_enrolled.head()

print(df_enrolled['riskStatus'].value_counts())

"""Berdasarkan hasil prediksi terhadap seluruh mahasiswa yang sedang menempuh pendidikan di JayaJaya Institut, sebanyak 348 mahasiswa diperkirakan diprediksikan akan mengalami dropout.

"""



"""# 7. Kesimpulan

Dalam proyek ini, telah dilakukan analisis data guna mengidentifikasi faktor-faktor yang memengaruhi risiko mahasiswa mengalami dropout (berhenti studi) di Jaya Jaya Institution. Selain itu, model machine learning juga telah dikembangkan untuk memprediksi apakah seorang mahasiswa akan lulus atau mengalami dropout, dengan menggunakan data akademik, demografis, sosial, serta ekonomi/keuangan.

1. Faktor-Faktor yang Berpengaruh terhadap Risiko Dropout

* **Approval Rate**

  Tingkat persetujuan mata kuliah (approval rate) memiliki pengaruh signifikan terhadap status kelulusan mahasiswa. Semakin tinggi persentase satuan kredit yang diselesaikan dari total yang diambil, semakin kecil kemungkinan mahasiswa untuk dropout.

* **Course (Program Studi)**

  Program studi yang diambil juga memengaruhi tingkat dropout. Beberapa program memiliki tingkat kesulitan yang tinggi, menyebabkan peningkatan risiko dropout. Program dengan tingkat dropout tinggi antara lain Manajemen, Keperawatan, Periklanan dan Manajemen Pemasaran, serta Teknik Informatika.

* **Tuition Fees Up To Date**

  Ketepatan pembayaran biaya kuliah berkorelasi dengan status mahasiswa. Mahasiswa yang menunggak pembayaran lebih rentan mengalami kendala administrasi atau ekonomi yang dapat memicu dropout.

* **Scholarship Holder**

  Mahasiswa penerima beasiswa umumnya memiliki komitmen akademik yang tinggi serta dukungan finansial yang stabil, sehingga peluang mereka untuk lulus jauh lebih besar dibanding mahasiswa non-penerima beasiswa.

* **Average Grade**

  Rata-rata nilai akademik menjadi indikator langsung dari kinerja belajar mahasiswa. Mahasiswa dengan nilai rata-rata tinggi cenderung dapat menyelesaikan studinya tepat waktu, sementara nilai yang rendah menjadi indikator risiko dropout.

* **Fitur Lainnya**

  Berdasarkan analisis fitur penting, beberapa faktor lain yang juga berpengaruh antara lain status sebagai debitur (debtor), usia saat mulai kuliah (`Age_at_enrollment`), pekerjaan ibu (`Mother_occupation`), jalur pendaftaran (`Application_mode`), serta total satuan kredit yang telah disetujui selama studi (`Total_approved_curricular_units`).

2. Evaluasi Model Prediksi

Tiga model pembelajaran mesin telah dievaluasi, yaitu Logistic Regression, Random Forest, dan Support Vector Machine (SVM). Hasil evaluasi menunjukkan bahwa **model terbaik adalah Random Forest**, dengan performa sebagai berikut:

* **Accuracy:** 0.915978
* **Precision:** 0.912766
* **Recall:** 0.955457
* **F1-Score:** 0.933624

Model ini menunjukkan performa prediksi yang konsisten dan seimbang. Logistic Regression dan SVM juga memberikan hasil yang baik, namun Random Forest menunjukkan keunggulan akurasi secara keseluruhan.

3. Rekomendasi Strategis (Actionable Recommendations)

Berdasarkan hasil analisis dan prediksi, berikut beberapa langkah yang dapat diambil oleh Jaya Jaya Institution untuk mengurangi angka dropout dan meningkatkan keberhasilan akademik:

* **Pemantauan Dini Berdasarkan Approval Rate**

  Mahasiswa dengan approval rate rendah sebaiknya dipantau secara berkala melalui sistem peringatan dini, sesi konseling akademik, kelas remedial, atau bimbingan sebaya.

* **Evaluasi Program Studi dengan Tingkat Dropout Tinggi**

  Program studi seperti Manajemen, Keperawatan, dan Teknik Informatika dapat dievaluasi kembali dari sisi beban akademik dan pendekatan pembelajaran. Pelatihan dosen tentang metode pengajaran yang suportif juga dapat dilakukan.

* **Kebijakan Pembayaran Kuliah yang Lebih Fleksibel**

  Opsi cicilan, penjadwalan ulang pembayaran, atau kebijakan tenggang waktu dapat membantu mahasiswa yang menghadapi kendala ekonomi untuk tetap melanjutkan studi.

* **Perluasan Akses terhadap Beasiswa**

  Menambah kuota dan ragam beasiswa serta sosialisasi akses yang lebih masif dapat membantu mahasiswa dari latar belakang ekonomi sulit untuk tetap bertahan dalam studi.

* **Dukungan Akademik bagi Mahasiswa dengan Nilai Rendah**

  Program bimbingan tambahan dan pembentukan komunitas belajar dapat mendukung mahasiswa dalam meningkatkan performa akademik.

* **Pemanfaatan Model Prediktif untuk Monitoring dan Intervensi**

  Model machine learning dapat digunakan untuk mendeteksi mahasiswa dengan risiko tinggi secara dini. Selain itu, pengembangan dashboard interaktif dapat memfasilitasi pihak institusi dalam memantau status mahasiswa secara berkala.

**Konversi Model untuk Streamlit Web**
"""

# model
with open('model.pkl', 'wb') as f:
    pickle.dump(model_rf, f)

# scaler
with open('scaler.pkl', 'wb') as f:
    pickle.dump(scaler, f)

"""**Export Data untuk Dashboard Metabase**"""

feature_importance_df.to_csv("feature_importance.csv")

df.to_csv("data_student_performance.csv")

df_enrolled.to_csv("student_enrolled_prediction.csv")

!pip install pandas sqlalchemy

from sqlalchemy import create_engine

URL = "postgresql://postgres.dlkmlsnydxoeiyckaqtd:SayLAz12.@aws-0-ap-southeast-1.pooler.supabase.com:5432/postgres"
engine = create_engine(URL)

try:
  feature_importance_df.to_sql('students_performance_feature_importance', engine, if_exists='replace', index=False)
  print("Data berhasil diunggah ke tabel 'students_performance_feature_importance'!")
  df.to_sql('data_student_performance', engine, if_exists='replace', index=False)
  print("Data berhasil diunggah ke tabel 'data_student_performance'!")
  df_enrolled.to_sql('student_enrolled_prediction', engine, if_exists='replace', index=False)
  print("Data berhasil diunggah ke tabel 'student_enrolled_prediction'!")
except Exception as e:
  print(f"Error saat mengunggah data: {e}")